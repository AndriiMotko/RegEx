import React from 'react';
import { PageContainer,
  H1,
  H2,
  H4,
  OL,
  LI,
  Def,
  Text,
  Code,
  UL,
  CodeL } from './styles';

const RegexPage = () => (
  <PageContainer>
    <H1>Вивчаємо RegEx</H1>
    <H2>Синтаксис RegEx</H2>

    <OL>
      <LI>
        <H4>Символи:</H4>
        <Def>
          Усі символи, окрім тих, що мають спеціальне значення в регулярному
          виразі, збігаються самі.
        </Def>
        <Text>
          {`
          Наприклад, регулярний вираз x відповідає підрядку "x"; регулярний
          вираз 9 відповідає "9"; регулярний вираз = відповідає "="; і
          регулярний вираз @ відповідає "@"`}
        </Text>
      </LI>

      <LI>
        <H4>Спеціальні символи Regex:</H4>
        <Def>
          Ці символи мають особливе значення в регулярних виразах (про які
          йдеться нижче):
        </Def>
        <Text>
          <Code>{'., +, *, ?, ^, $, (, ), [, ], {, }, |, /'}</Code>
        </Text>
      </LI>

      <LI>
        <H4>Екранування спецсимволів (\char)</H4>
        <UL>
          <LI>
            <Def>
              Щоб відповідати символу, який має спеціальне значення в
              регулярному виразі, потрібно використовувати спецсимвол зі
              зворотною скісною рискою (
              <CodeL>\</CodeL>
              ).
            </Def>
            <Text>
              Наприклад:
              <Code>{'\\.  =>  "."'}</Code>
              <Code>{'\\+  =>  "+"'}</Code>
              <Code>{'\\(  =>  "("'}</Code>
            </Text>
          </LI>

          <LI>
            <Def>
              Вам також потрібно використовувати регулярний вираз

              <CodeL>\\</CodeL>

              для відповідності
              <CodeL>{'"\"'}</CodeL>

              (зворотна коса риска).
            </Def>
            <Text>
              Наприклад:
              <Code>{'\\\\  =>  "\\"'}</Code>
            </Text>
          </LI>

          <LI>
            <Def>
              Регулярний вираз розпізнає типові керуючі послідовності, такі як:
              <UL listStyle="circle">
                <LI>
                  <CodeL>\n</CodeL>
                  {' '}
                  - для нового рядка;
                </LI>
                <LI>
                  <CodeL>\t</CodeL>
                  {' '}
                  - для табуляції;
                </LI>
                <LI>
                  <CodeL>\r</CodeL>
                  {' '}
                  - для повернення каретки;
                </LI>
                <LI>
                  <CodeL>\nnn</CodeL>

                  - для вісімкового числа до 3 цифр;
                </LI>
                <LI>
                  <CodeL>\xhh</CodeL>

                  - для двозначного шістнадцяткового коду;
                </LI>
                <LI>
                  <CodeL>\uhhhh</CodeL>

                  - для 4-значний Unicode;
                </LI>
                <LI>
                  <CodeL>\uhhhhhhhh</CodeL>

                  - для 8-значного Unicode;
                </LI>
              </UL>
            </Def>
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Послідовність символів (або рядків):</H4>
        <Def>
          Рядки можна зіставляти шляхом комбінування
          послідовності символів (так звані підвирази).
        </Def>
        <Text>
          Наприклад, регулярний вираз:
          <Code>{'Saturday => "Saturday"'}</Code>
        </Text>
        <Text>
          За умовчанням відповідність

          <strong>чутлива до регістру</strong>
          , але її можна встановити за допомогою

          <i>модифікатора</i>
          .
        </Text>
      </LI>

      <LI>
        <H4>Оператор АБО "|"</H4>
        <Text>
          Наприклад, регулярний вираз:
          <CodeL>four|4</CodeL>

          приймає рядки

          <CodeL>"four"</CodeL>

          або

          <CodeL>"4"</CodeL>
        </Text>
      </LI>

      <LI>
        <H4>Клас символів (або список у дужках)</H4>
        <UL>
          <LI>
            <CodeL>[...]</CodeL>
            : приймає

            <strong>БУДЬ-ЯКИЙ</strong>

            із символів у квадратних дужках;
            <Code>{'[aeiou] => "a", "e", "i", "o" або "u"'}</Code>
          </LI>
          <LI>
            <CodeL>[.-.]</CodeL>

            (вираз діапазону): приймає

            <strong>БУДЬ-ЯКИЙ</strong>

            із символів у діапазоні;
            <Code>{'[0-9] => будь-яке число'}</Code>
            <Code>
              {'[A-Za-z] => відповідає будь-якій великій або малій літері'}
            </Code>
          </LI>
          <LI>
            <CodeL>[^...]</CodeL>
            :

            <strong>ЖОДНИЙ</strong>

            із символів у діапазоні;
            <Code>{'[0-9] => будь-який НЕ числовий символ'}</Code>
          </LI>
          <LI>
            <Text>
              Лише ці чотири символи потребують escape-послідовності
              всередині списку дужок:
              <CodeL>{'^, -, ], \/'}</CodeL>
            </Text>
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Індикатори появи (або оператори повторення)</H4>
        <UL>
          <LI>
            <CodeL>+</CodeL>
            : один або декілька (<CodeL>+1</CodeL>)
            <Text>
              Наприклад:
              <CodeL>[0-9]+</CodeL> відповідає одній або декільком цифрам,
              наприклад <CodeL>«123»</CodeL>, <CodeL>«000»</CodeL>
            </Text>
          </LI>
          <LI>
            <CodeL>*</CodeL>
            : нуль або більше (<CodeL>0+</CodeL>)
            <Text>
              Наприклад:
              <CodeL>[0-9]*</CodeL> відповідає нулю або більше цифр.
              Він приймає всі значення в <CodeL>[0-9]+</CodeL>
              плюс порожній рядок
            </Text>
          </LI>
          <LI>
            <CodeL>{`{m,n}`}</CodeL>:
            від <CodeL>m</CodeL> до <CodeL>n</CodeL> (обидва включно)
          </LI>
          <LI>
            <CodeL>{`{m}`}</CodeL>:
            рівно <CodeL>m</CodeL> разів
          </LI>
          <LI>
            <CodeL>
              {`{m,}`}
            </CodeL>
            : m або більше (<CodeL>m+</CodeL>)
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Метасимволи:</H4>
        <UL>
          <LI>
            <CodeL>.</CodeL>(крапка):
            БУДЬ-ЯКИЙ символ, крім нового рядка. Те саме,
            що <CodeL>[^\n]</CodeL>
          </LI>
          <LI>
            <CodeL>\d, \D</CodeL>:
            БУДЬ-ЯКА ОДНА цифра/нецифровий символ. Цифри <CodeL>[0-9]</CodeL>
          </LI>
          <LI>
            <CodeL>w, \W</CodeL>:
            БУДЬ-ЯКИЙ символ слова/не слова.
            Для ASCII символами слів є <CodeL>[a-zA-Z0-9_]</CodeL>
          </LI>
          <LI>
            <CodeL>\s, \S</CodeL>:
            БУДЬ-ЯКИЙ символ пробілу/непробілу.
            Для ASCII пробілами є <CodeL>[\n\r\t\f]</CodeL>
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Позиційні якорі:</H4>
        <Text>
          Не відповідає символам, а позиціям, таким як початок рядка,
          кінець рядка, початок слова та кінець слова
        </Text>

        <UL>
          <LI>
            <CodeL>^, $</CodeL>:
            початок і кінець рядка відповідно.
            Наприклад, <CodeL>^[0-9]$</CodeL> відповідає числовому рядку
          </LI>
          <LI>
            <CodeL>\b</CodeL>:
            межа слова, тобто початок або кінець слова.
            Наприклад,
            <CodeL>\bcat\b</CodeL> відповідає слову "cat" у вхідному рядку
          </LI>
          <LI>
            <CodeL>\B</CodeL>:
            зворотній до <CodeL>\b</CodeL>, тобто не починається
            або не закінчується словом
          </LI>
          <LI>
            <CodeL>{`\\<, \\>`}</CodeL>:
            початок і кінець слова відповідно, подібно до <CodeL>\b</CodeL>.
            Наприклад, <CodeL>{`\\<cat\\>`}</CodeL> відповідає слову "cat"
            у вхідному рядку
          </LI>
          <LI>
            <CodeL>\A, \Z</CodeL>:
            початок введення та кінець введення відповідно
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Зворотні посилання в дужках:</H4>
        <UL>
          <LI>
            Використовуйте круглі дужки <CodeL>( )</CodeL>,
            щоб створити зворотне посилання
          </LI>
          <LI>
            Використовуйте <CodeL>$1, $2, ...</CodeL> ,
            щоб отримати зворотні посилання в послідовному порядку
          </LI>
        </UL>
      </LI>

      <LI>
        <H4>Умовність (приборкання операторів повторення):</H4>
        <UL>
          <LI>
            <CodeL>{`*?, +?, ??, {m,n}?, {m,}? `}</CodeL>
          </LI>
        </UL>
      </LI>
    </OL>
  </PageContainer>
);

export default RegexPage;
